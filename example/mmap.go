// generated by yagi. Don't modify this file!
// Any changes will be lost if this file is regenerated.

package main

type KeyMagicString struct {
	counter int
	lastKey string
}

func (km *KeyMagicString) doMagicOnKey(key string) {
	km.counter++
	km.lastKey = key
}

type MapStringInt64 struct {
	items    map[string]int64
	keyMagic KeyMagicString
}

func NewStringInt64() *MapStringInt64 {
	return &MapStringInt64{make(map[string]int64), KeyMagicString{}}
}

func (m *MapStringInt64) Put(key string, value int64) {
	m.items[key] = value
	m.keyMagic.doMagicOnKey(key)
}

func (m MapStringInt64) Get(key string) int64 {
	return m.items[key]
}

type MapStringInt32 struct {
	items    map[string]int32
	keyMagic KeyMagicString
}

func NewStringInt32() *MapStringInt32 {
	return &MapStringInt32{make(map[string]int32), KeyMagicString{}}
}

func (m *MapStringInt32) Put(key string, value int32) {
	m.items[key] = value
	m.keyMagic.doMagicOnKey(key)
}

func (m MapStringInt32) Get(key string) int32 {
	return m.items[key]
}
