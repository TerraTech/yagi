// generated by yagi. Don't modify this file!
// Any changes will be lost if this file is regenerated.

package main

type ElementInt64 struct {
	next, prev *ElementInt64
	list       *ListInt64
	Value      int64
}

func (e *ElementInt64) Next() *ElementInt64 {
	if p := e.next; e.list != nil && p != &e.list.root {
		return p
	}
	return nil
}

func (e *ElementInt64) Prev() *ElementInt64 {
	if p := e.prev; e.list != nil && p != &e.list.root {
		return p
	}
	return nil
}

type ListInt64 struct {
	root ElementInt64
	len  int
}

func (l *ListInt64) Init() *ListInt64 {
	l.root.next = &l.root
	l.root.prev = &l.root
	l.len = 0
	return l
}

func NewInt64() *ListInt64 {
	return new(ListInt64).Init()
}

func (l *ListInt64) Len() int {
	return l.len
}

func (l *ListInt64) Front() *ElementInt64 {
	if l.len == 0 {
		return nil
	}
	return l.root.next
}

func (l *ListInt64) Back() *ElementInt64 {
	if l.len == 0 {
		return nil
	}
	return l.root.prev
}

func (l *ListInt64) lazyInit() {
	if l.root.next == nil {
		l.Init()
	}
}

func (l *ListInt64) insert(e, at *ElementInt64) *ElementInt64 {
	n := at.next
	at.next = e
	e.prev = at
	e.next = n
	n.prev = e
	e.list = l
	l.len++
	return e
}

func (l *ListInt64) insertValue(v int64, at *ElementInt64) *ElementInt64 {
	return l.insert(&ElementInt64{Value: v}, at)
}

func (l *ListInt64) remove(e *ElementInt64) *ElementInt64 {
	e.prev.next = e.next
	e.next.prev = e.prev
	e.next = nil
	e.prev = nil
	e.list = nil
	l.len--
	return e
}

func (l *ListInt64) Remove(e *ElementInt64) int64 {
	if e.list == l {
		l.remove(e)
	}
	return e.Value
}

func (l *ListInt64) PushFront(v int64) *ElementInt64 {
	l.lazyInit()
	return l.insertValue(v, &l.root)
}

func (l *ListInt64) PushBack(v int64) *ElementInt64 {
	l.lazyInit()
	return l.insertValue(v, l.root.prev)
}

func (l *ListInt64) InsertBefore(v int64, mark *ElementInt64) *ElementInt64 {
	if mark.list != l {
		return nil
	}
	return l.insertValue(v, mark.prev)
}

func (l *ListInt64) InsertAfter(v int64, mark *ElementInt64) *ElementInt64 {
	if mark.list != l {
		return nil
	}
	return l.insertValue(v, mark)
}

func (l *ListInt64) MoveToFront(e *ElementInt64) {
	if e.list != l || l.root.next == e {
		return
	}
	l.insert(l.remove(e), &l.root)
}

func (l *ListInt64) MoveToBack(e *ElementInt64) {
	if e.list != l || l.root.prev == e {
		return
	}
	l.insert(l.remove(e), l.root.prev)
}

func (l *ListInt64) MoveBefore(e, mark *ElementInt64) {
	if e.list != l || e == mark || mark.list != l {
		return
	}
	l.insert(l.remove(e), mark.prev)
}

func (l *ListInt64) MoveAfter(e, mark *ElementInt64) {
	if e.list != l || e == mark || mark.list != l {
		return
	}
	l.insert(l.remove(e), mark)
}

func (l *ListInt64) PushBackList(other *ListInt64) {
	l.lazyInit()
	for i, e := other.Len(), other.Front(); i > 0; i, e = i-1, e.Next() {
		l.insertValue(e.Value, l.root.prev)
	}
}

func (l *ListInt64) PushFrontList(other *ListInt64) {
	l.lazyInit()
	for i, e := other.Len(), other.Back(); i > 0; i, e = i-1, e.Prev() {
		l.insertValue(e.Value, &l.root)
	}
}

type ElementString struct {
	next, prev *ElementString
	list       *ListString
	Value      string
}

func (e *ElementString) Next() *ElementString {
	if p := e.next; e.list != nil && p != &e.list.root {
		return p
	}
	return nil
}

func (e *ElementString) Prev() *ElementString {
	if p := e.prev; e.list != nil && p != &e.list.root {
		return p
	}
	return nil
}

type ListString struct {
	root ElementString
	len  int
}

func (l *ListString) Init() *ListString {
	l.root.next = &l.root
	l.root.prev = &l.root
	l.len = 0
	return l
}

func NewString() *ListString {
	return new(ListString).Init()
}

func (l *ListString) Len() int {
	return l.len
}

func (l *ListString) Front() *ElementString {
	if l.len == 0 {
		return nil
	}
	return l.root.next
}

func (l *ListString) Back() *ElementString {
	if l.len == 0 {
		return nil
	}
	return l.root.prev
}

func (l *ListString) lazyInit() {
	if l.root.next == nil {
		l.Init()
	}
}

func (l *ListString) insert(e, at *ElementString) *ElementString {
	n := at.next
	at.next = e
	e.prev = at
	e.next = n
	n.prev = e
	e.list = l
	l.len++
	return e
}

func (l *ListString) insertValue(v string, at *ElementString) *ElementString {
	return l.insert(&ElementString{Value: v}, at)
}

func (l *ListString) remove(e *ElementString) *ElementString {
	e.prev.next = e.next
	e.next.prev = e.prev
	e.next = nil
	e.prev = nil
	e.list = nil
	l.len--
	return e
}

func (l *ListString) Remove(e *ElementString) string {
	if e.list == l {
		l.remove(e)
	}
	return e.Value
}

func (l *ListString) PushFront(v string) *ElementString {
	l.lazyInit()
	return l.insertValue(v, &l.root)
}

func (l *ListString) PushBack(v string) *ElementString {
	l.lazyInit()
	return l.insertValue(v, l.root.prev)
}

func (l *ListString) InsertBefore(v string, mark *ElementString) *ElementString {
	if mark.list != l {
		return nil
	}
	return l.insertValue(v, mark.prev)
}

func (l *ListString) InsertAfter(v string, mark *ElementString) *ElementString {
	if mark.list != l {
		return nil
	}
	return l.insertValue(v, mark)
}

func (l *ListString) MoveToFront(e *ElementString) {
	if e.list != l || l.root.next == e {
		return
	}
	l.insert(l.remove(e), &l.root)
}

func (l *ListString) MoveToBack(e *ElementString) {
	if e.list != l || l.root.prev == e {
		return
	}
	l.insert(l.remove(e), l.root.prev)
}

func (l *ListString) MoveBefore(e, mark *ElementString) {
	if e.list != l || e == mark || mark.list != l {
		return
	}
	l.insert(l.remove(e), mark.prev)
}

func (l *ListString) MoveAfter(e, mark *ElementString) {
	if e.list != l || e == mark || mark.list != l {
		return
	}
	l.insert(l.remove(e), mark)
}

func (l *ListString) PushBackList(other *ListString) {
	l.lazyInit()
	for i, e := other.Len(), other.Front(); i > 0; i, e = i-1, e.Next() {
		l.insertValue(e.Value, l.root.prev)
	}
}

func (l *ListString) PushFrontList(other *ListString) {
	l.lazyInit()
	for i, e := other.Len(), other.Back(); i > 0; i, e = i-1, e.Prev() {
		l.insertValue(e.Value, &l.root)
	}
}
